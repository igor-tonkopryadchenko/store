// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package addons_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddonsServiceClient is the client API for AddonsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddonsServiceClient interface {
	UpdateSection(ctx context.Context, in *UpdateSectionRequest, opts ...grpc.CallOption) (*NoResponse, error)
	ListSections(ctx context.Context, in *ListSectionsRequest, opts ...grpc.CallOption) (*ListSectionsResponse, error)
}

type addonsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddonsServiceClient(cc grpc.ClientConnInterface) AddonsServiceClient {
	return &addonsServiceClient{cc}
}

func (c *addonsServiceClient) UpdateSection(ctx context.Context, in *UpdateSectionRequest, opts ...grpc.CallOption) (*NoResponse, error) {
	out := new(NoResponse)
	err := c.cc.Invoke(ctx, "/addons_service.AddonsService/UpdateSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonsServiceClient) ListSections(ctx context.Context, in *ListSectionsRequest, opts ...grpc.CallOption) (*ListSectionsResponse, error) {
	out := new(ListSectionsResponse)
	err := c.cc.Invoke(ctx, "/addons_service.AddonsService/ListSections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddonsServiceServer is the server API for AddonsService service.
// All implementations must embed UnimplementedAddonsServiceServer
// for forward compatibility
type AddonsServiceServer interface {
	UpdateSection(context.Context, *UpdateSectionRequest) (*NoResponse, error)
	ListSections(context.Context, *ListSectionsRequest) (*ListSectionsResponse, error)
	mustEmbedUnimplementedAddonsServiceServer()
}

// UnimplementedAddonsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddonsServiceServer struct {
}

func (UnimplementedAddonsServiceServer) UpdateSection(context.Context, *UpdateSectionRequest) (*NoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSection not implemented")
}
func (UnimplementedAddonsServiceServer) ListSections(context.Context, *ListSectionsRequest) (*ListSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSections not implemented")
}
func (UnimplementedAddonsServiceServer) mustEmbedUnimplementedAddonsServiceServer() {}

// UnsafeAddonsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddonsServiceServer will
// result in compilation errors.
type UnsafeAddonsServiceServer interface {
	mustEmbedUnimplementedAddonsServiceServer()
}

func RegisterAddonsServiceServer(s grpc.ServiceRegistrar, srv AddonsServiceServer) {
	s.RegisterService(&AddonsService_ServiceDesc, srv)
}

func _AddonsService_UpdateSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonsServiceServer).UpdateSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/addons_service.AddonsService/UpdateSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonsServiceServer).UpdateSection(ctx, req.(*UpdateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonsService_ListSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonsServiceServer).ListSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/addons_service.AddonsService/ListSections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonsServiceServer).ListSections(ctx, req.(*ListSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddonsService_ServiceDesc is the grpc.ServiceDesc for AddonsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddonsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "addons_service.AddonsService",
	HandlerType: (*AddonsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSection",
			Handler:    _AddonsService_UpdateSection_Handler,
		},
		{
			MethodName: "ListSections",
			Handler:    _AddonsService_ListSections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/addons_v1.proto",
}
