// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: domain/addons_v1.proto

package domain

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Locale with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Locale) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Locale with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LocaleMultiError, or nil if none found.
func (m *Locale) ValidateAll() error {
	return m.validate(true)
}

func (m *Locale) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Language_name[int32(m.GetLang())]; !ok {
		err := LocaleValidationError{
			field:  "Lang",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Country_name[int32(m.GetCountry())]; !ok {
		err := LocaleValidationError{
			field:  "Country",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LocaleMultiError(errors)
	}
	return nil
}

// LocaleMultiError is an error wrapping multiple validation errors returned by
// Locale.ValidateAll() if the designated constraints aren't met.
type LocaleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocaleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocaleMultiError) AllErrors() []error { return m }

// LocaleValidationError is the validation error returned by Locale.Validate if
// the designated constraints aren't met.
type LocaleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocaleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocaleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocaleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocaleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocaleValidationError) ErrorName() string { return "LocaleValidationError" }

// Error satisfies the builtin error interface
func (e LocaleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocale.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocaleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocaleValidationError{}

// Validate checks the field values on YearWeek with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *YearWeek) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on YearWeek with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in YearWeekMultiError, or nil
// if none found.
func (m *YearWeek) ValidateAll() error {
	return m.validate(true)
}

func (m *YearWeek) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetYear(); val < 2010 || val >= 2030 {
		err := YearWeekValidationError{
			field:  "Year",
			reason: "value must be inside range [2010, 2030)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetWeek(); val < 1 || val > 52 {
		err := YearWeekValidationError{
			field:  "Week",
			reason: "value must be inside range [1, 52]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return YearWeekMultiError(errors)
	}
	return nil
}

// YearWeekMultiError is an error wrapping multiple validation errors returned
// by YearWeek.ValidateAll() if the designated constraints aren't met.
type YearWeekMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m YearWeekMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m YearWeekMultiError) AllErrors() []error { return m }

// YearWeekValidationError is the validation error returned by
// YearWeek.Validate if the designated constraints aren't met.
type YearWeekValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e YearWeekValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e YearWeekValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e YearWeekValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e YearWeekValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e YearWeekValidationError) ErrorName() string { return "YearWeekValidationError" }

// Error satisfies the builtin error interface
func (e YearWeekValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sYearWeek.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = YearWeekValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = YearWeekValidationError{}

// Validate checks the field values on Section with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Section) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Section with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SectionMultiError, or nil if none found.
func (m *Section) ValidateAll() error {
	return m.validate(true)
}

func (m *Section) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Handle

	// no validation rules for Index

	// no validation rules for Singular

	// no validation rules for Plural

	// no validation rules for Description

	// no validation rules for ImageUri

	if len(errors) > 0 {
		return SectionMultiError(errors)
	}
	return nil
}

// SectionMultiError is an error wrapping multiple validation errors returned
// by Section.ValidateAll() if the designated constraints aren't met.
type SectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SectionMultiError) AllErrors() []error { return m }

// SectionValidationError is the validation error returned by Section.Validate
// if the designated constraints aren't met.
type SectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SectionValidationError) ErrorName() string { return "SectionValidationError" }

// Error satisfies the builtin error interface
func (e SectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SectionValidationError{}
